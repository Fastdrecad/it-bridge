name: Deploy to VPS

on:
  push:
    branches:
      - master

jobs:
  deploy:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e # Exit immediately if a command exits with a non-zero status

            APP_DIR="/var/www/it-bridge"
            DEPLOY_DIR="/var/www/it-bridge-deploy"
            BACKUP_DIR="/var/www/backups"
            TIMESTAMP=$(date +%Y%m%d%H%M%S)

            # Ensure directories exist
            mkdir -p ${BACKUP_DIR}
            mkdir -p ${DEPLOY_DIR}

            # Clone the latest code to the deployment directory
            echo "🔄 Fetching latest code..."
            rm -rf ${DEPLOY_DIR}
            git clone --depth=1 https://github.com/Fastdrecad/it-bridge.git ${DEPLOY_DIR}

            # Create backup if the app directory exists
            if [ -d "${APP_DIR}" ]; then
              echo "📦 Creating backup..."
              tar -czf ${BACKUP_DIR}/it-bridge-${TIMESTAMP}.tar.gz -C /var/www it-bridge
              
              # Preserve .env file if it exists
              if [ -f "${APP_DIR}/.env" ]; then
                cp ${APP_DIR}/.env ${DEPLOY_DIR}/.env
              fi
            fi

            # Write environment variables if .env doesn't exist
            if [ ! -f "${DEPLOY_DIR}/.env" ]; then
              echo "🔐 Writing environment variables..."
              echo "NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}" > ${DEPLOY_DIR}/.env
              echo "NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}" >> ${DEPLOY_DIR}/.env
              echo "MAILCHIMP_API_KEY=${{ secrets.MAILCHIMP_API_KEY }}" >> ${DEPLOY_DIR}/.env
              echo "MAILCHIMP_AUDIENCE_ID=${{ secrets.MAILCHIMP_AUDIENCE_ID }}" >> ${DEPLOY_DIR}/.env
              echo "MAILCHIMP_API_SERVER=${{ secrets.MAILCHIMP_API_SERVER }}" >> ${DEPLOY_DIR}/.env
              echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> ${DEPLOY_DIR}/.env
              echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> ${DEPLOY_DIR}/.env
              echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> ${DEPLOY_DIR}/.env
              echo "MAILER_API_KEY=${{ secrets.MAILER_API_KEY }}" >> ${DEPLOY_DIR}/.env
              echo "MAILER_LIST_ID=${{ secrets.MAILER_LIST_ID }}" >> ${DEPLOY_DIR}/.env
            fi

            # Install dependencies and build
            echo "📦 Installing dependencies..."
            cd ${DEPLOY_DIR}
            npm ci
            npm run build

            # Swap directories atomically
            echo "🚀 Deploying new version..."
            rm -rf ${APP_DIR}.old
            if [ -d "${APP_DIR}" ]; then
              mv ${APP_DIR} ${APP_DIR}.old
            fi
            mv ${DEPLOY_DIR} ${APP_DIR}

            # Restart the application
            echo "🔄 Restarting application..."
            cd ${APP_DIR}
            pm2 restart it-bridge || pm2 start npm --name "it-bridge" -- start

            # Clean up old files
            echo "🧹 Cleaning up..."
            rm -rf ${APP_DIR}.old

            # Keep only the 5 most recent backups
            cd ${BACKUP_DIR}
            ls -tp | grep -v '/$' | tail -n +6 | xargs -I {} rm -- {}

            echo "✅ Deployment complete!"
